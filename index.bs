<pre class='metadata'>
Title: WebID API
Shortname: webid
Level: 1
Status: CG-DRAFT
Group: WICG
ED: http://wicg.github.io/WebID
Repository: WICG/WebID
Editor: Sam Goto, Google Inc. https://google.com, goto@google.com
Markup Shorthands: markdown yes, css no, biblio yes
Text Macro: FALSE <code>false</code>
Text Macro: TRUE <code>true</code>
Text Macro: RP Relying Party
Text Macro: IDP Identity Provider
Abstract: This specification defines a [=high-level API=] that enables users to authenticate to [=Website=]s using [=Identity Provider=]s. 
Test Suite: https://github.com/web-platform-tests/wpt/tree/master/web-id
</pre>

<pre class=anchors>
spec: ecma262; urlPrefix: https://tc39.github.io/ecma262/
    type: dfn
        text: time values; url: sec-time-values-and-time-range
        text: promise; url: sec-promise-objects

spec: credential-management-1; urlPrefix: https://w3c.github.io/webappsec-credential-management/
    type: dictionary
        text: CredentialRequestOptions; url: dictdef-credentialrequestoptions
    for: Credential
        type: method
            text: [[CollectFromCredentialStore]](origin, options, sameOriginWithAncestors)
            text: [[Create]](origin, options, sameOriginWithAncestors)
            text: [[DiscoverFromExternalSource]](origin, options, sameOriginWithAncestors)
            text: [[Store]](credential, sameOriginWithAncestors)
    type: dfn
        text: signal
        text: same-origin with its ancestors; url: same-origin-with-its-ancestors
</pre>

<pre class=link-defaults>
spec:infra; type:dfn; text:list
spec:html; type:dfn; for:environment settings object; text:global object
spec:webidl; type:dfn; text:resolve
</pre>

<style>
dl.domintro dt {
    font-family: Menlo, Consolas, "DejaVu Sans Mono", Monaco, monospace;

    padding-top: 0.5em;
    padding-bottom: 1em;
}
dl.domintro dt a {
    color: inherit; border-bottom-style: none;
}
dl.domintro dt code {
    font-size: inherit;
}
</style>

<!-- ============================================================ -->
# Introduction # {#intro}
<!-- ============================================================ -->

*This section is non-normative.*

Over the last decade, identity federation has unquestionably played a central role in raising the bar for authentication on the web, in terms of ease-of-use (e.g. passwordless single sign-on), security (e.g. improved resistance to phishing and credential stuffing attacks) and trustworthiness compared to its preceding pattern: per-site usernames and passwords.

The standards that define how identity federation works today on the Web were built independently of the Web Platform (namely, [[SAML]], [[OpenID]] and [[OAuth]]), and their designers had to (rightfully so) work around its limitations rather than extend them.

Because of that, existing user authentication flows were designed on top of general-purpose web platform capabilities such as top-level navigations/redirects with parameters, window popups, iframes and cookies.

However, because these general purpose primitives can be used for an open ended number of use cases (again, notably, by design), browsers have to apply policies that capture the lowest common denominator of abuse, at best applying cumbersome permissions (e.g. popup blockers) and at worst entirely blocking them (e.g. blocking third party cookies).

Over the years, as these low level primitives get abused, browsers intervene and federation adjusts itself. For example, popup blockers became common and federation had to adjust itself to work in a world where popups blockers were widely deployed.

The challenge, now more than ever, is that some of these low level primitives are getting increasingly abused to allow users on the web to be tracked. So, as a result, browsers are applying stricter and stricter policies around them.

Blocking third party cookies broke important parts of the protocols in those browsers (e.g. front channel logouts) and made some user experiences inviable (e.g. social buttons personalization).

While it is clearer to see the current impact of third party cookies, it is equally important to understand the ways in which the low level primitives that identity federation depends on (e.g. redirects) are being abused and the principles browsers are using to control them, so that we don't corner ourselves into another dead end.

This specification defines a set of web platform APIs that preserve and extend identity federation compatible with a more private Web.

<!-- ============================================================ -->
# Use Cases # {#use-cases}
<!-- ============================================================ -->

The below use case scenarios illustrate some basic supported flows. Additional scenarios, including sample code, are given later in [[Identity-Use-Cases-in-Browser-Catalog]].

<!-- ============================================================ -->
## Sign-up ## {#sign-up}
<!-- ============================================================ -->

* A user navigates to a [=Relying Party=] in a browser and decides to create an account.
* The [=Relying Party=] supports multiple [=Identity Provider=] as an authentication mechanism.
* A user selects their favorite [=Identity Provider=] to sign-up with.
* The [=Identity Provider=] prompts, "Do you want to create an account with the [=Relying Party=]?"
* The user agrees.
* The [=Relying Party=] shows the message "Registration complete." and authenticates the user.

<!-- ============================================================ -->
## Sign-in ## {#sign-in}
<!-- ============================================================ -->

* Using one device (e.g. their phone):
    * A user navigates to a [=Relying Party=] in a browser and decides to create an account by going through their [[#sign-up]] flow.
* Using another device (e.g. their laptop):
    * The user goes to the [=Relying Party=].
    * The user selects their favorite [=Identity Provider=] to sign-in.
    * The [=Identity Provider=] remembers that the user already has an account with the [=Relying Party=].
    * The [=Relying Party=] authenticates the user.

<!-- ============================================================ -->
## Sign-out ## {#sign-out}
<!-- ============================================================ -->

* On a shared computer:
    * A user navigates to a [=Relying Party=] in a browser and decides to create an account by going through their [[#sign-up]] flow.
    * The user decides to log out of the [=Relying Party=].
    * The [=Relying Party=] lets the [=Identity Provider=] know that the user wants to logout.
    * The [=Identity Provider=] logs the user out of [=Relying Party=] and itself.

<!-- ============================================================ -->
## Revocation ## {#revocation}
<!-- ============================================================ -->

* A user navigates to a [=Relying Party=] in a browser and decides to create an account by going through their [[#sign-up]] flow.
* The user decides to cancel their account.
* The user goes to their [=Identity Provider=] and revokes access to the [=Relying Party=].

<!-- ============================================================ -->
## Authorization ## {#authorization}
<!-- ============================================================ -->

* A user navigates to a [=Relying Party=] in a browser and decides to create an account.
* The [=Relying Party=] supports multiple [=Identity Provider=] as an authentication mechanism.
* A user selects their favorite [=Identity Provider=] to sign-up with.
* The [=Identity Provider=] prompts, "Do you want to give access to your Calendar to the [=Relying Party=]?"
* The user agrees.
* The [=Relying Party=] shows message, "Registration complete.", authenticates the user and shows the user their calendar entries provided by the [=Identity Provider=].

<!-- ============================================================ -->
# Examples # {#examples}
<!-- ============================================================ -->

<!-- ============================================================ -->
## The Account Management API ## {#intro-account-management-api}
<!-- ============================================================ -->


<div class=example>
```js
let {id_token} = await navigator.credentials.get({
  // controls which UX mode to use
  mode: "mediated",
  // controls whether auto sign-in is enabled or not
  mediation: "optional",
  // controls whether the account chooser is modal or not
  modal: true,
  // controls which identity providers to use
  providers: [{
    url: "https://idp.example",
    // the pre-registered client id
    client_id: "123",
    nonce: "456"
  }],
  // controls abortions of the account chooser
  signal: signal
});
```
</div>

<!-- ============================================================ -->
## The Session Management API ## {#intro-session-management-api}
<!-- ============================================================ -->

<div class=example>
```js
await FederatedCredential.logout({
  endpoints: [{
    url: "https://rp1.example",
    account_id: "123",
  }, {
    url: "https://rpN.example",
    account_id: "456",
  }]
});
```
</div>

<!-- ============================================================ -->
## Feature Detection ## {#intro-feature-detection}
<!-- ============================================================ -->

<div class=example>
```js
if (!window.FederatedCredential) {
  // feature not available
  // TODO(goto): this is probably insufficient.
  return;
}
```
</div>

<!-- ============================================================ -->
# Terminology # {#terminology}
<!-- ============================================================ -->

: <dfn>Relying Party</dfn>
: <dfn>RP</dfn>
: <dfn>Website</dfn>
:: TODO(goto): find existing definitions.

: <dfn>Identity Provider</dfn>
: <dfn>IDP</dfn>
:: TODO(goto): find existing definitinos.

: <dfn>High-Level API</dfn>
:: A use case specific API, as opposed to a [=low-level API=].

: <dfn>Low-Level API</dfn>
:: A general purpose API, as opposed to a [=high-level API=].

<!-- ============================================================ -->
# Account Management API # {#AccountManagementAPI}
<!-- ============================================================ -->

Websites call <code><a idl for="CredentialsContainer" lt="get()">navigator.credentials.get({providers:..., ...})</a></code> to retrieve a {{FederatedCredential}}.

<!-- ============================================================ -->
## The FederatedCredential Interface ## {#FederatedCredential}
<!-- ============================================================ -->

<xmp class=idl>
[Exposed=Window, SecureContext]
interface FederatedCredential : Credential {
  readonly attribute USVString provider;
  readonly attribute USVString id_token;
  static Promise<void> logout(optional sequence<USVString> logout_endpoints = []);
};
</xmp>

<dl dfn-type="attribute" dfn-for="OTPCredential">
    :   {{Credential/id}}
    ::  This attribute is inherited from {{Credential}}
</dl>

<!-- ============================================================ -->
## `FederatedCredentialRequestOptions` ## {#FederatedCredentialRequestOptions}
<!-- ============================================================ -->

To support obtaining OTPs via {{CredentialsContainer/get()|navigator.credentials.get()}},
this document extends the {{CredentialRequestOptions}} dictionary as follows:

<xmp class="idl">
partial dictionary FederatedCredentialRequestOptions {
  sequence<(DOMString or FederatedIdentityProvider)> providers;
  sequence<DOMString> protocols;
  FederatedCredentialRequestMode mode = "mediated";
};
</xmp>

<div dfn-type="dict-member" dfn-for="CredentialRequestOptions">
    :   <dfn>otp</dfn>
    ::  This OPTIONAL member is used to make WebOTP requests.
</div>

<!-- ============================================================ -->
## `FederatedCredentialRequestMode` ## {#FederatedCredentialRequestMode}
<!-- ============================================================ -->

The {{FederatedCredentialRequestMode}} dictionary supplies
{{CredentialsContainer/get()|navigator.credentials.get()}} with the data it needs to retrieve an
idtoken.

<xmp class="idl">
enum FederatedCredentialRequestMode {
  "mediated",
  "permission"
};
</xmp>

<!-- ============================================================ -->
# Session Management API # {#SessionManagementAPI}
<!-- ============================================================ -->

Websites call <code><a idl for="FederatedCredential" lt="get()">FederatedCredential.logout(...)</a></code> to log the user out of a series of relying parties.

<!-- ============================================================ -->
## RP Initiated Logout ## {#rp-logout}
<!-- ============================================================ -->

<!-- ============================================================ -->
## IDP Initiated Logout ## {#idp-logout}
<!-- ============================================================ -->


<!-- ============================================================ -->
# Security # {#security}
<!-- ============================================================ -->

<!-- ============================================================ -->
# Privacy # {#privacy}
<!-- ============================================================ -->

<!-- ============================================================ -->
## Privacy Threat Model ## {#privacy-threat-model}
<!-- ============================================================ -->

<!-- ====================================================================== -->
# Acknowledgements # {#acknowledgements}
<!-- ====================================================================== -->


<pre class="biblio">
{
  "OpenID": {
    "href": "https://openid.net/developers/specs/",
    "title": "OpenID"
  },
  "OAuth": {
    "authors": ["D. Hardt"],
    "href": "https://datatracker.ietf.org/doc/html/rfc6749",
    "title": "OAuth"
  },
  "SAML": {
    "href": "http://saml.xml.org/saml-specifications",
    "title": "SAML"
  },
  "WEB-LOGIN": {
    "authors": [ "Jason Denizac", "Robin Berjon", "Anne van Kesteren" ],
    "href": "https://github.com/jden/web-login",
    "title": "web-login"
  },
  "BrowserID": {
    "href": "https://github.com/mozilla/id-specs/blob/prod/browserid/index.md",
    "title": "BrowserID"
  },
  "WebID": {
    "href": "https://www.w3.org/2005/Incubator/webid/spec/identity/",
    "title": "WebID"
  },
  "Identity-Use-Cases-in-Browser-Catalog": {
    "authors": [ "V. Bertocci", "G. Fletcher" ],
    "href": "https://datatracker.ietf.org/doc/html/draft-bertocci-identity-in-browser-00",
    "title": "Identity Use Cases in Browser Catalog"
  }
}
</pre>